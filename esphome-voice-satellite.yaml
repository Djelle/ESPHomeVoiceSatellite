# = PINS USED =
# GPIO4  : LED Strip
# GPIO14 : MAX98357A / BCLK
# GPIO13 : MAX98357A / LRC
# GPIO27 : MAX98357A / DIN
# GPIO18 : Button Power (Wake Word On/Of)
# GPIO19 : Button Next (Config selection Increse)
# GPIO21 : Button Play/Pause (Change config selection. E.g. Volume, LED Brightness.)(Future maybe: Mic-volume, Noise suppression, Gain.)
# GPIO22 : Button Call (Push To Listen)
# GPIO23 : Button Prev (Config selection Decrese)
# GPIO25 : INMP441 / SCK
# GPIO26 : INMP441 / WS
# GPIO33 : INMP441 / SD

substitutions:
  name: esphome-voice-satellite
  friendly_name: 'Voice Satellite'
  led_pwr_factor: '0.3' # 0 - 1 (My LED-strip draws too much power.)
  led_addressable: 'true' # true / false.
  led_num: '35' # Number of LEDs
  error_phase: 'Error'
  idle_phase: 'Idle'
  listening_phase: 'Listening'
  thinking_phase: 'Thinking'
  replying_phase: 'Replying'
  not_ready_phase: 'Not Ready'
  muted_phase: 'Mic Muted'
  config_volume: '0'
  config_brightness: '1'
  config_timeout: '5s'

globals:
  - id: 'use_wake_word_forced_off'
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: 'led_brightness_pf'
    type: float
    restore_value: false
    initial_value: '0.5'
  - id: 'config_selected'
    type: int
    restore_value: false
    initial_value: '0'
  - id: 'config_led_red'
    type: float
    restore_value: false
    initial_value: '0'
  - id: 'config_led_green'
    type: float
    restore_value: false
    initial_value: '0'
  - id: 'config_led_blue'
    type: float
    restore_value: false
    initial_value: '0'
  - id: 'config_range_color'
    type: int
    restore_value: false
    initial_value: '0'
  - id: 'config_range_white'
    type: int
    restore_value: false
    initial_value: '0'
  - id: 'config_range_black'
    type: int
    restore_value: false
    initial_value: '0'


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: djelle.voice_satellite
    version: '1.0'
  on_boot:
    priority: 600
    then:
      - text_sensor.template.publish:
          id: va_state
          state: "${not_ready_phase}"

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended
#    type: arduino

# Enable logging
logger:
  level: DEBUG
  logs: 
    light: INFO

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${friendly_name}
    password: !secret wifi_password

captive_portal:

voice_assistant:
  id: va
  microphone: external_microphone 
  speaker: external_speaker
  use_wake_word: false
  noise_suppression_level: 2 # 0, 1, 2, 3, 4
  auto_gain: 31dBFS # 0dBFS - 31dBFS
  volume_multiplier: 2 # >0

  on_wake_word_detected:
    - script.execute: sound_beep

  on_listening:
    - text_sensor.template.publish:
        id: va_state
        state: "${listening_phase}"

  on_stt_vad_end:
    - text_sensor.template.publish:
        id: va_state
        state: "${thinking_phase}"
    - script.execute: sound_beep
    - delay: 160ms
    - script.execute: sound_beep

  on_tts_stream_start:
    - text_sensor.template.publish:
        id: va_state
        state: "${replying_phase}"

  on_tts_stream_end:
    - script.execute: stop_listening

  on_error:
    - if:
        condition:
          and:
            - text_sensor.state:
                id: va_state
                state: "${thinking_phase}"
            - lambda: 'return (code == "stt-no-text-recognized");' # Error-code-text MUST be in double-quotes.
        then:
          - script.execute: stop_listening

#    - logger.log:
#        level: WARN
#        format: "Err.code: %s Msg: %s"
#        args: [ code.c_str(), message.c_str() ]
#
# [E][voice_assistant:653]: Error: no_wake_word - No wake word detected
# [E][voice_assistant:653]: Error: stt-no-text-recognized - No text recognized

  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous
          - text_sensor.template.publish:
              id: va_state
              state: "${idle_phase}"
        else:
          - text_sensor.template.publish:
              id: va_state
              state: "${muted_phase}"

  on_client_disconnected: 
    - text_sensor.template.publish:
        id: va_state
        state: "${not_ready_phase}"

i2s_audio:
  - id: i2s_in
    i2s_lrclk_pin: GPIO26 # WS
    i2s_bclk_pin: GPIO25 # SCK
  - id: i2s_out
    i2s_lrclk_pin: GPIO13 # LRC
    i2s_bclk_pin: GPIO14 # BCLK

microphone: # INMP441
  - platform: i2s_audio
    i2s_audio_id: i2s_in
    id: external_microphone
    adc_type: external
    i2s_din_pin: GPIO33 # SD
    pdm: false
    bits_per_sample: 32bit

speaker: # MAX98357A
  - platform: i2s_audio
    i2s_audio_id: i2s_out
    id: external_speaker
    dac_type: external
    i2s_dout_pin: GPIO27 # DIN
    mode: mono

light:
  - platform: esp32_rmt_led_strip  # Change to used type of LED-strip.
    chipset: WS2812                # Change to used chip on LED-strip.
    name: "Status LED"
    id: led
    icon: 'mdi:alarm-light'
    restore_mode: RESTORE_DEFAULT_ON
    rmt_channel: 0
    rgb_order: GRB
    pin: GPIO4
    num_leds: ${led_num}
    #max_refresh_rate: 
    default_transition_length: 0s
    effects:
      - lambda:
          name: 'listening_effect'
          update_interval: 30ms
          lambda: |-
            static float step = 16;
            static esphome::Color rgb = Color(0,1,1);
            auto call = id(led).turn_on();
            call.set_rgb(rgb[0],rgb[1]*abs(step)*0.06,rgb[2]);
            call.set_transition_length(30);
            call.perform();
            step += 1;
            if (step > 16)
            step = -16;
      - lambda:
          name: 'thinking_effect'
          update_interval: 50ms
          lambda: |-
            static float step = -10;
            auto call = id(led).turn_on();
            call.set_brightness( id(led_brightness_pf) * ((abs(step)*0.03)+0.7) );
            call.perform();
            step += 1;
            if (step > 10)
            step = -10;
      - addressable_lambda:
          name: 'adr_thinking_effect'
          update_interval: 30ms
          lambda: |-
            static int step = 0;
            static int size = it.size();
            static int width = size/7;
            static esphome::Color rgb = Color(255,147,211);
            static esphome::Color fade = Color(16,32,16);
            if(initial_run) {
            step = 0;
            it.all() = Color(0,0,0);
            if( width < 1 ) width=1;
            return;
            }
            if(step < size-width) {
            if( step==0 ) {
            it.all() = it[size-1].get();
            it.range(1, width+1) = rgb;
            }
            it[0] = Color(it[1].get())-fade;
            it.shift_right(1);
            }
            else {
            if( step==size-width ) {
            it.all() = it[0].get();
            it.range(size-width-1, size-1) = rgb;
            }
            it[size-1] = Color(it[size-2].get())-fade;
            it.shift_left(1);
            }
            step += 1;
            if (step > (size-width)*2) { step = 0; }
      - lambda:
          name: 'replying_effect'
          update_interval: 300ms
          lambda: |-
            static int step = 0;
            float b = id(led_brightness_pf) * 0.25;
            auto call = id(led).turn_on();
            call.set_transition_length( 200 + (((float)rand()/RAND_MAX)*200) ); // ms
            if (step == 0) call.set_brightness( (b*(float)rand()/RAND_MAX) + (b*3) );
            else call.set_brightness( (b*(float)rand()/RAND_MAX) + (b*2) );
            call.perform();
            step += 1;
            if (step > 1)
            step = 0;
      - addressable_lambda:
          name: 'adr_replying_effect'
          update_interval: 100ms
          lambda: |-
            static int size = it.size();
            static int nr = size/5;
            int nrlist[nr];
            static esphome::Color rgb = Color(255,255,0);
            static esphome::Color fade = Color(16,16,0);
            if(initial_run) {
            if( nr < 1 ) nr=1;
            it.all() = Color(16,16,0);
            return;
            }
            for( int i=0; i < size; i++ ) {
            it[i] = Color(it[i].get())-fade;;
            }
            for( int i=0; i < nr; i++ ) {
            nrlist[i] = ((float)rand()/RAND_MAX)*size;
            it[nrlist[i]] = rgb;
            }
      - lambda:
          name: 'error_effect'
          update_interval: 500ms
          lambda: |-
            static int step = 0;
            auto call = id(led).turn_on();
            if (step == 0) {
            call.set_transition_length(0); // ms
            call.set_brightness(id(led_brightness_pf));
            }
            else {
            call.set_transition_length(200); // ms
            call.set_brightness(0.1);
            }
            call.perform();
            step += 1;
            if (step > 1)
            step = 0;

    on_turn_on:
      - script.execute: state_set_led

number:
  - platform: template
    name: 'Volumen'
    id: speaker_volume
    icon: 'mdi:volume-high'
    optimistic: true
    update_interval: never
    unit_of_measurement: '%'
    device_class: power_factor
    mode: slider
    min_value: 0
    max_value: 100
    step: 10
    restore_value: true
#    on_value: <=================================================================================== Set volume
#      then:
        

  - platform: template
    name: 'Brightness'
    id: led_brightness
    icon: 'mdi:brightness-7'
    optimistic: true
    update_interval: never
    unit_of_measurement: '%'
    device_class: power_factor
    mode: slider
    min_value: 10
    max_value: 100
    step: 1
    restore_value: true
    on_value:
      then:
        - lambda: "id(led_brightness_pf) = x*0.01*${led_pwr_factor};"
        - if:
            condition:
              for:
                time: 1s
                condition:
                  api.connected:
            then:
              if:
                condition:
                  - light.is_on: led
                then:
                  - light.control:
                      id: led
                      color_mode: RGB
                      brightness: !lambda "return(id(led_brightness_pf));"

text_sensor:
  - platform: template
    name: 'Status'
    id: va_state
    update_interval: never
    on_value:
      - script.execute: state_set_led

switch:
  - platform: template
    name: 'Use Wake Word'
    id: use_wake_word
    icon: 'mdi:chat-sleep'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lambda: "id(va).set_use_wake_word(true);"
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
            - text_sensor.template.publish:
                id: va_state
                state: "${idle_phase}"

    on_turn_off:
      - lambda: "id(va).set_use_wake_word(false);"
      - voice_assistant.stop
      - text_sensor.template.publish:
          id: va_state
          state: "${muted_phase}"

binary_sensor:
# Push Button Power
- platform: gpio
  id: pb_power
  pin:
    number: 18
    mode:
      input: true
      pulldown: true
  filters:
    - delayed_on: 10ms
  on_press:
    - script.execute: sound_key_click
    - delay: 150ms
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - switch.template.publish:
              id: use_wake_word
              state: OFF
          - speaker.stop:
              id: external_speaker
        else:
          - switch.template.publish:
              id: use_wake_word
              state: ON

# Push Button Next
- platform: gpio
  id: pb_next
  pin:
    number: 19
    mode:
      input: true
      pulldown: true
  filters:
    - delayed_on: 10ms
    - autorepeat:
      - delay: 500ms
        time_off: 100ms
        time_on: 100ms
  on_press:
    - script.execute: sound_key_click
    - if:
        condition:
          lambda: "return(id(config_selected) == ${config_volume});"
        then:
          - number.increment:
              id: speaker_volume
              cycle: false
    - if:
        condition:
          lambda: "return(id(config_selected) == ${config_brightness});"
        then:
          - if:
              condition:
                lambda: "return( id(led_brightness).state <= 90 );"
              then:
                - number.set:
                    id: led_brightness
                    value: !lambda "return( id(led_brightness).state += 10 );"
              else:
                - number.to_max:
                    id: led_brightness
    - script.execute: config_set_led

# Push Button Previous
- platform: gpio 
  id: pb_prev
  pin:
    number: 23
    mode:
      input: true
      pulldown: true
  filters:
    - delayed_on: 10ms
    - autorepeat:
      - delay: 500ms
        time_off: 100ms
        time_on: 100ms
  on_press:
    - script.execute: sound_key_click
    - if:
        condition:
          lambda: "return(id(config_selected) == ${config_volume});"
        then:
          - number.decrement:
              id: speaker_volume
              cycle: false
    - if:
        condition:
          lambda: "return(id(config_selected) == ${config_brightness});"
        then:
          - if:
              condition:
                lambda: "return( id(led_brightness).state >= 20 );"
              then:
                - number.set:
                    id: led_brightness
                    value: !lambda "return( id(led_brightness).state -= 10 );"
              else:
                - number.to_min:
                    id: led_brightness
    - script.execute: config_set_led

# Push Button Play/Pause
- platform: gpio 
  id: pb_play
  pin:
    number: 21
    mode:
      input: true
      pulldown: true
  filters:
    - delayed_on: 10ms
  on_press:
    - script.execute: sound_key_click
    - if:
        condition:
          lambda: "return(id(config_selected) < 1);"
        then:
          - lambda: "id(config_selected) += 1;"
        else:
          - lambda: "id(config_selected) = 0;"
    - script.execute: config_set_led
#    - homeassistant.service:
#        service: tts.speak
#        data:
#          entity_id: tts.piper
#          cache: 'true'
#          media_player_entity_id: media_player.esphome_voice_satellite_1_test
#          message: 'Volume'

# Push Button Call
- platform: gpio 
  id: pb_call
  pin:
    number: 22
    mode:
      input: true
      pulldown: true
  filters:
    - delayed_on: 10ms
  on_press:
    - if:
        condition:
          - voice_assistant.is_running
        then:
          - if:
              condition:
                - text_sensor.state:
                    id: va_state
                    state: ${idle_phase}
              then:
                - switch.template.publish:
                    id: use_wake_word
                    state: OFF
                - wait_until:
                    not:
                      voice_assistant.is_running
                - lambda: "id(use_wake_word_forced_off) = true;"
                - text_sensor.template.publish:
                    id: va_state
                    state: "${listening_phase}"
                - script.execute: sound_beep
                - delay: 400ms
                - voice_assistant.start
        else:
          - if:
              condition:
                - text_sensor.state:
                    id: va_state
                    state: ${muted_phase}
              then:
                - text_sensor.template.publish:
                    id: va_state
                    state: "${listening_phase}"
                - script.execute: sound_beep
                - delay: 400ms
                - voice_assistant.start

script:
  - id: state_set_led
    then:
      - delay: 200ms # To prevent light.control from miss-writing LED-strip while VA is working hard.
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${idle_phase}"
          then:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                red: 0.0
                green: 1.0
                blue: 0.5
                effect: none
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${listening_phase}"
          then:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                red: 0.0
                green: 1.0
                blue: 1.0
                effect: listening_effect
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${thinking_phase}"
          then:
            - if:
                condition:
                  lambda: "return ${led_addressable};"
                then:
                  - light.control:
                      id: led
                      color_mode: RGB
                      brightness: !lambda "return(id(led_brightness_pf));"
                      red: 1.0
                      green: 0.0
                      blue: 0.8
                      effect: adr_thinking_effect
                else:
                  - light.control:
                      id: led
                      color_mode: RGB
                      brightness: !lambda "return(id(led_brightness_pf));"
                      red: 1.0
                      green: 0.0
                      blue: 0.8
                      effect: thinking_effect
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${replying_phase}"
          then:
            - if:
                condition:
                  lambda: "return ${led_addressable};"
                then:
                  - light.control:
                      id: led
                      color_mode: RGB
                      brightness: !lambda "return(id(led_brightness_pf));"
                      red: 1.0
                      green: 1.0
                      blue: 0.0
                      effect: adr_replying_effect
                else:
                  - light.control:
                      id: led
                      color_mode: RGB
                      brightness: !lambda "return(id(led_brightness_pf));"
                      red: 1.0
                      green: 1.0
                      blue: 0.0
                      effect: replying_effect
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${error_phase}"
          then:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                red: 1.0
                green: 0.0
                blue: 0.0
                effect: error_effect
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${muted_phase}"
          then:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                red: 1.0
                green: 0.7
                blue: 0.0
                effect: none
      - if:
          condition:
            - text_sensor.state:
                id: va_state
                state: "${not_ready_phase}"
          then:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                red: 1.0
                green: 1.0
                blue: 1.0
                effect: none


  - id: stop_listening
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - text_sensor.template.publish:
                id: va_state
                state: "${idle_phase}"
          else:
            - if:
                condition:
                  lambda: "return(id(use_wake_word_forced_off));"
                then:
                  - switch.template.publish:
                      id: use_wake_word
                      state: ON
                  - lambda: "id(use_wake_word_forced_off) = false;"
                  - text_sensor.template.publish:
                      id: va_state
                      state: "${idle_phase}"
                else:
                  - text_sensor.template.publish:
                      id: va_state
                      state: "${muted_phase}"


  - id: config_set_led
    then:
      - script.execute: config_led_set_vars
      - if:
          condition:
            lambda: "return ${led_addressable};"
          then:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                effect: none
            - light.addressable_set:
                id: led
                range_from: 0
                range_to: !lambda "return id(config_range_color) - 1;"
                red: !lambda "return id(config_led_red);"
                green: !lambda "return id(config_led_green);"
                blue: !lambda "return id(config_led_blue);"
            - light.addressable_set:
                id: led
                range_from: !lambda "return id(config_range_color);"
                range_to: !lambda "return id(config_range_color) + id(config_range_white);"
                red: 1
                green: 1
                blue: 1
            - if: 
                condition:
                  lambda: "return 1 + id(config_range_white) < ${led_num} - id(config_range_color) - 1;"
                then:
                - light.addressable_set:
                    id: led
                    range_from: !lambda "return 1 + id(config_range_color) + id(config_range_white);"
                    range_to: !lambda "return ${led_num} - id(config_range_color) - 1;"
                    red: 0
                    green: 0
                    blue: 0
            - light.addressable_set:
                id: led
                range_from: !lambda "return ${led_num} - id(config_range_color);"
                range_to: !lambda "return ${led_num} - 1;"
                red: !lambda "return id(config_led_red);"
                green: !lambda "return id(config_led_green);"
                blue: !lambda "return id(config_led_blue);"
          else:
            - light.control:
                id: led
                color_mode: RGB
                brightness: !lambda "return(id(led_brightness_pf));"
                red: !lambda "return id(config_led_red);"
                green: !lambda "return id(config_led_green);"
                blue: !lambda "return id(config_led_blue);"
                effect: none


  - id: config_led_set_vars
    then:
      - script.execute: config_timeout_timer
      - lambda: |-
          id(config_range_color) = ${led_num}/5;
          if( id(config_range_color) < 1) id(config_range_color)=1;
          static float w = ${led_num} - (id(config_range_color) * 2);
          if( w < 1 ) w=1;
          switch(id(config_selected)) {
          case ${config_volume}:
          id(config_range_white) = (int)( id(speaker_volume).state/round(100/w) );
          id(config_led_red) = 0;
          id(config_led_green) = 0;
          id(config_led_blue) = 1;
          break;
          case ${config_brightness}:
          id(config_range_white) = (int)( id(led_brightness).state/round(100/w) );
          id(config_led_red) = 1;
          id(config_led_green) = 1;
          id(config_led_blue) = 0;
          break;
          }


  - id: config_timeout_timer
    mode: restart
    then: 
      - delay: ${config_timeout}
      - script.execute: state_set_led


  - id: sound_beep
    then:
      - if:
          condition:
            not:
              - speaker.is_playing
#                  id: external_speaker
          then:
            - speaker.play:
                id: external_speaker
                data: [0x00,0x00,0xFF,0x05,0x00,0xFE,0x00,0x00,0xFC,0x03,0x01,0xFD,0x02,0x01,0xFD,0x00,0x02,0xF9,0x03,0x00,0xFD,0xFF,0x03,0xFA,0x01,0x03,0xFC,0x01,0x02,0xFD,0x01,0x06,0xFA,0x03,0x02,0xFF,0xFE,0x05,0xFB,0xFF,0x03,0xFC,0xFF,
                  0x01,0xFB,0xFB,0x05,0xFA,0x00,0x00,0x00,0xFB,0x07,0xFE,0xFF,0x03,0x00,0x00,0x05,0x01,0xFA,0x06,0xFD,0x00,0xFD,0x02,0xF6,0x04,0xFD,0xFD,0xFE,0xFF,0xF9,0x02,0x03,0xFA,0x04,0x00,0x03,0xFE,0x0A,0xF9,0x05,0x00,0x03,0xFE,0x05,
                  0xF9,0xFE,0x01,0xFB,0xFD,0xFB,0x00,0xF5,0x07,0xF9,0x02,0xFA,0x05,0xFA,0x0B,0xFF,0x01,0x02,0x07,0x01,0x01,0x07,0xF7,0x05,0xFC,0x03,0xF6,0x05,0xF0,0x03,0xFB,0xFF,0xF5,0x05,0xFB,0xFD,0x09,0xFC,0x02,0x00,0x0B,0xFA,0x11,0xF8,
                  0x06,0xFF,0x0C,0xF2,0x08,0xFA,0xF7,0x00,0xFF,0xF8,0xF8,0x04,0xEE,0x0A,0xFA,0x00,0xF7,0x14,0xF1,0x0E,0x05,0x00,0xFE,0x0F,0xFE,0xFF,0x0C,0xF1,0x03,0x01,0xFF,0xE9,0x12,0xE8,0xFF,0xFF,0x01,0xEC,0x0D,0xF9,0xFB,0x10,0xFD,0xFD,
                  0x0C,0x10,0xED,0x1D,0xF7,0xFF,0x00,0x11,0xE6,0x0F,0xF7,0xF1,0x02,0x03,0xE8,0xFD,0x0C,0xE2,0x10,0x01,0xFB,0xF7,0x1E,0xE9,0x15,0x09,0xFC,0xFE,0x1D,0xEF,0xFE,0x15,0xE7,0xFE,0x08,0xF9,0xE4,0x19,0xDE,0xFF,0x05,0xFC,0xE4,0x21,
                  0xF2,0xF8,0x1C,0xFD,0xF5,0x16,0x0D,0xE9,0x26,0xF3,0xF9,0x0A,0x0F,0xD4,0x1B,0xF4,0xE6,0x07,0x07,0xDD,0x07,0x0B,0xDD,0x18,0x04,0xF0,0x04,0x28,0xDB,0x1E,0x0F,0xF2,0xFF,0x24,0xE3,0x04,0x16,0xDE,0x00,0x10,0xE7,0xE6,0x25,0xD4,
                  0xFF,0x11,0xF6,0xE4,0x2C,0xE9,0xFC,0x23,0xF7,0xF3,0x29,0x00,0xE4,0x2F,0xED,0xEF,0x13,0x08,0xD0,0x24,0xEC,0xE3,0x10,0x01,0xD2,0x1A,0x08,0xD8,0x22,0x09,0xE7,0x10,0x24,0xD6,0x27,0x0D,0xE9,0x0B,0x24,0xD1,0x0D,0x15,0xD4,0x01,
                  0x17,0xDB,0xF1,0x23,0xCE,0x05,0x17,0xE8,0xF0,0x37,0xDF,0x01,0x2B,0xF0,0xF2,0x30,0xF3,0xEB,0x31,0xE5,0xEE,0x1E,0xF4,0xD0,0x2B,0xE5,0xDF,0x1B,0xFD,0xD2,0x25,0xFE,0xDB,0x2A,0x04,0xE3,0x24,0x19,0xD4,0x2C,0x0C,0xDE,0x13,0x1B,
                  0xCD,0x16,0x0E,0xCF,0x0A,0x11,0xCD,0x02,0x1F,0xCD,0x0B,0x1E,0xE0,0xFD,0x31,0xDB,0x0A,0x2B,0xE7,0xFE,0x32,0xE2,0xF3,0x2D,0xDF,0xEC,0x24,0xE7,0xDD,0x29,0xDF,0xE4,0x22,0xEE,0xDD,0x2E,0xF6,0xE3,0x2E,0x01,0xE2,0x2B,0x09,0xDD,
                  0x2D,0x04,0xDD,0x20,0x08,0xCE,0x1A,0x06,0xCF,0x10,0x0E,0xCE,0x0F,0x13,0xD2,0x12,0x19,0xDA,0x12,0x26,0xDD,0x0F,0x27,0xE0,0x04,0x28,0xDD,0xFF,0x24,0xDB,0xF5,0x20,0xD8,0xEE,0x21,0xE0,0xEB,0x26,0xE8,0xEB,0x29,0xEF,0xED,0x2C,
                  0xF7,0xEE,0x2F,0xF9,0xE8,0x25,0xFE,0xDD,0x22,0xFB,0xDC,0x19,0xFE,0xD5,0x16,0xFE,0xD7,0x18,0x09,0xDD,0x15,0x16,0xDD,0x1A,0x15,0xE4,0x12,0x1D,0xE0,0x12,0x16,0xDE,0x05,0x16,0xDD,0xFB,0x19,0xDA,0xFD,0x15,0xE3,0xF4,0x1F,0xE2,
                  0x00,0x1F,0xF1,0xF8,0x25,0xF3,0xF5,0x24,0xF1,0xF5,0x1D,0xF8,0xE8,0x1E,0xEC,0xEB,0x12,0xFA,0xE1,0x17,0xF9,0xE6,0x17,0xFF,0xE9,0x14,0x0A,0xE8,0x1E,0x05,0xF0,0x0F,0x12,0xE4,0x12,0x08,0xE8,0x09,0x0B,0xE5,0x02,0x0B,0xE0,0x07,
                  0x08,0xEF,0xF8,0x19,0xE9,0x02,0x12,0xF5,0xF9,0x19,0xFA,0xF9,0x1B,0xF6,0xFA,0x0D,0x04,0xEA,0x14,0xFA,0xF1,0x08,0x03,0xEA,0x06,0x03,0xE8,0x09,0x03,0xF4,0xFD,0x11,0xED,0x08,0x0B,0xF8,0xFE,0x12,0xF9,0xFF,0x12,0xF6,0xFF,0x09,
                  0x00,0xF1,0x0F,0xF6,0xF8,0x05,0x00,0xF1,0x06,0xFE,0xF1,0x08,0xFF,0xF9,0x00,0x0A,0xF3,0x09,0x04,0xFB,0x01,0x0B,0xFA,0x03,0x09,0xF7,0x01,0x04,0xFD,0xF8,0x09,0xF6,0xFD,0x03,0xFD,0xF8,0x04,0xFB,0xFA,0x07,0xFD,0xFD,0x02,0x04,
                  0xF9,0x08,0x00,0xFE,0x02,0x04,0xFC,0x04,0x02,0xFA,0x02,0x00,0xFC,0xFE,0x03,0xF9,0x00,0x01,0xFD,0xFD,0x03,0xFB,0x00,0x03,0xFE,0xFF,0x03,0x01,0xFC,0x06,0xFD,0x01,0x00,0x00,0xFE,0x00,0x00,0xFB,0x03,0xFD,0x00,0xFF,0x00,0x00]
            - wait_until:
                not:
                  speaker.is_playing


  - id: sound_key_click
    then:
      - if:
          condition:
            or:
              - text_sensor.state:
                  id: va_state
                  state: ${replying_phase} );"
              - speaker.is_playing
#                  id: external_speaker
          else:
            - speaker.play:
                id: external_speaker
                data: [0x0B,0xF5,0x3A,0xF8,0x9B,0x4D,0x66,0x7A,0xD5,0x85,0x92,0xAD,0x4D,0x51,0x5D,0xE8,0x88,0xF8,0x6E,0x52,0x06,0xD2,0xCA,0x11,0x06,0x0C,0x01,0x04,0xF0,0xE9,0x1E,0xC2,0xBC,0xF4,0x0F,0x20,0xF0,0xD1,0xE6,0xFC,0x03,0x08,
                  0xF9,0xF8,0x0F,0x25,0x1B,0x0B,0x03,0x00,0x09,0x17,0x16,0x0F,0xFB,0xDC,0xEE,0x09,0x04,0xFD,0xEE,0xD6,0xEC,0x0D,0x09,0xFD,0xF0,0xF1,0xFB,0x03,0x0D,0x12,0x09]
            - wait_until:
                not:
                  - speaker.is_playing
#                      id: external_speaker
